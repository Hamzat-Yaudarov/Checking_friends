import { Context } from 'telegraf';
import {
  getOrCreateUser,
  getOrCreateSession,
  updateSessionState,
  getSession,
  createTest,
  addQuestion,
  addAnswer,
  getUserByTelegramId,
  getTestsByUser,
  getTestWithQuestions,
  getQuestionWithAnswers,
  markAnswerAsCorrect,
  deleteTest,
} from '../db/queries.js';
import {
  mainMenuKeyboard,
  createTestStartKeyboard,
  nextQuestionKeyboard,
  saveTestKeyboard,
  cancelKeyboard,
  testActionKeyboard,
  correctAnswersKeyboard,
} from './keyboards.js';

export async function handleStart(ctx: Context) {
  try {
    const telegramId = ctx.from?.id;
    if (!telegramId) return ctx.reply('Error: Could not identify user');

    await getOrCreateUser(telegramId, ctx.from?.username);
    await getOrCreateSession(telegramId);

    // Check if there's a test_id in the start parameter
    const contextAny = ctx as any;
    const startParam = contextAny.startPayload;
    if (startParam && startParam.startsWith('test_')) {
      const testId = parseInt(startParam.replace('test_', ''));
      if (testId) {
        return ctx.reply(`üéØ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω! –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã. –ü–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ —Ç–µ—Å—Ç—ã.`, {
          ...mainMenuKeyboard,
        });
      }
    }

    const welcomeMessage = `üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü—Ä–æ–≤–µ—Ä–∫—É –î—Ä—É–∂–±—ã!* üéâ

–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ —Ç–≤–æ–∏ –¥—Ä—É–∑—å—è —Ç–µ–±—è –∑–Ω–∞—é—Ç!

–†–∞–∑–≤–ª–µ–∫–∞–π—Å—è, —Å–æ–∑–¥–∞–≤–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ *–î–û–°–¢–ò–ñ–ï–ù–ò–Ø –î–†–£–ñ–ë–´!*

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ ‚¨áÔ∏è`;

    return ctx.reply(welcomeMessage, {
      parse_mode: 'Markdown',
      ...mainMenuKeyboard,
    });
  } catch (error) {
    console.error('Error in handleStart:', error);
    return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
}

export async function handleCreateTest(ctx: Context) {
  try {
    const telegramId = ctx.from?.id;
    if (!telegramId) return;

    const user = await getUserByTelegramId(telegramId);
    const test = await createTest(user.id);

    await updateSessionState(telegramId, 'creating_test', {
      currentTestId: test.id,
      questionCount: 0,
    });

    const instructionMessage = `üìù *–ö–∞–∫ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ—Å—Ç:*

1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
2Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (–º–∏–Ω–∏–º—É–º 2)
3Ô∏è‚É£ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
4Ô∏è‚É£ –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç 5+ –≤–æ–ø—Ä–æ—Å–æ–≤, —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–µ—Å—Ç

–í–ø–µ—Ä—ë–¥! üöÄ`;

    // Edit the previous message
    await ctx.editMessageText(instructionMessage, {
      parse_mode: 'Markdown',
    });

    // Send message for first question
    return ctx.reply('üìå –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:', {
      ...createTestStartKeyboard,
    });
  } catch (error) {
    console.error('Error in handleCreateTest:', error);
    return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–∞.');
  }
}

export async function handleQuestionInput(ctx: Context) {
  try {
    const telegramId = ctx.from?.id;
    if (!telegramId || !ctx.message || !('text' in ctx.message)) return;

    const session = await getSession(telegramId);
    if (!session || session.state !== 'creating_test') return;

    const questionText = ctx.message.text;
    // Use current_question_count as the order (0-indexed becomes 1-indexed)
    const questionOrder = session.current_question_count + 1;

    // Add question to database
    const question = await addQuestion(session.current_test_id, questionText, questionOrder);

    // Update session with temp question (don't increment count yet - that happens on next_question)
    await updateSessionState(telegramId, 'collecting_answers', {
      tempQuestion: JSON.stringify({
        id: question.id,
        text: questionText,
        order: questionOrder,
      }),
      tempAnswers: JSON.stringify([]),
    });

    // Delete user's message
    try {
      await ctx.deleteMessage();
    } catch (e) {
      // Message might already be deleted
    }

    // Send prompt for answers
    const answerPrompt = `üìå *${questionOrder} –≤–æ–ø—Ä–æ—Å:* "${questionText}"

‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:
(–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–û—Ç–≤–µ—Ç: –í–∞—Ä–∏–∞–Ω—Ç 1
–û—Ç–≤–µ—Ç: –í–∞—Ä–∏–∞–Ω—Ç 2
–û—Ç–≤–µ—Ç: –í–∞—Ä–∏–∞–Ω—Ç 3)`;

    return ctx.reply(answerPrompt, {
      parse_mode: 'Markdown',
      ...createTestStartKeyboard,
    });
  } catch (error) {
    console.error('Error in handleQuestionInput:', error);
  }
}

export async function handleAnswerInput(ctx: Context) {
  try {
    const telegramId = ctx.from?.id;
    if (!telegramId || !ctx.message || !('text' in ctx.message)) return;

    const session = await getSession(telegramId);
    if (!session || session.state !== 'collecting_answers') return;

    const inputText = ctx.message.text;
    const tempQuestion = JSON.parse(session.temp_question || '{}');
    const tempAnswers = JSON.parse(session.temp_answers || '[]');

    // Parse answers from input
    const answerLines = inputText.split('\n').filter((line) => line.trim());
    const newAnswers: string[] = [];

    for (const line of answerLines) {
      if (line.toLowerCase().startsWith('–æ—Ç–≤–µ—Ç:')) {
        const answerText = line.substring('–æ—Ç–≤–µ—Ç:'.length).trim();
        if (answerText) {
          newAnswers.push(answerText);
        }
      } else if (tempAnswers.length === 0) {
        // If no answers yet and line doesn't start with "–û—Ç–≤–µ—Ç:", treat as single answer
        newAnswers.push(line.trim());
      }
    }

    // Combine with existing answers
    const allAnswers = [...tempAnswers, ...newAnswers];

    // Validate minimum 2 answers
    if (allAnswers.length < 2) {
      return ctx.reply(`‚ö†Ô∏è –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤! –°–µ–π—á–∞—Å –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${allAnswers.length}`);
    }

    // Save new answers to database
    for (let i = tempAnswers.length; i < allAnswers.length; i++) {
      await addAnswer(tempQuestion.id, allAnswers[i], i + 1);
    }

    // Update session
    await updateSessionState(telegramId, 'collecting_answers', {
      tempAnswers: JSON.stringify(allAnswers),
    });

    // Delete user's message
    try {
      await ctx.deleteMessage();
    } catch (e) {
      // Message might already be deleted
    }

    // Build answer display
    const answerDisplay = allAnswers.map((ans: string, idx: number) => `${idx + 1} - ${ans}`).join('\n');

    const updateMessage = `üìå *${tempQuestion.order} –≤–æ–ø—Ä–æ—Å:* "${tempQuestion.text}"

üìã –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:
${answerDisplay}`;

    // Determine keyboard based on answer count and question count
    const questionCount = session.current_question_count || tempQuestion.order || 0;
    let keyboard = createTestStartKeyboard;

    if (allAnswers.length >= 2) {
      if (questionCount >= 5) {
        keyboard = saveTestKeyboard;
      } else {
        keyboard = nextQuestionKeyboard;
      }
    }

    // Prepare correct answers prompt
    const correctAnswerMessage = `\n\nüéØ *–û—Ç–º–µ—Ç—å—ÇÔøΩÔøΩ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:*`;

    return ctx.reply(updateMessage + correctAnswerMessage, {
      parse_mode: 'Markdown',
      ...correctAnswersKeyboard(
        allAnswers.map((ans, idx) => ({
          id: `${tempQuestion.id}_${idx}`,
          text: ans,
        }))
      ),
    });
  } catch (error) {
    console.error('Error in handleAnswerInput:', error);
  }
}

export async function handleNextQuestion(ctx: Context) {
  try {
    const telegramId = ctx.from?.id;
    if (!telegramId) return;

    const session = await getSession(telegramId);
    if (!session) return;

    // Increment the question count for the next question
    const nextQuestionNumber = (session.current_question_count || 0) + 1;

    await updateSessionState(telegramId, 'creating_test', {
      questionCount: nextQuestionNumber,
    });

    const nextQuestionMessage = `üìå –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Ññ${nextQuestionNumber + 1}:`;

    return ctx.reply(nextQuestionMessage, {
      ...createTestStartKeyboard,
    });
  } catch (error) {
    console.error('Error in handleNextQuestion:', error);
  }
}

export async function handleSaveTest(ctx: Context) {
  try {
    const telegramId = ctx.from?.id;
    if (!telegramId) return;

    const session = await getSession(telegramId);
    if (!session) return;

    const questionCount = session.current_question_count || 0;
    if (questionCount < 5) {
      return ctx.reply(`‚ùå –¢–µ—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 –≤–æ–ø—Ä–æ—Å–æ–≤! –°–µ–π—á–∞—Å: ${questionCount}`, {
        ...nextQuestionKeyboard,
      });
    }

    // Test is automatically saved in database as questions/answers are added
    // Just clear the session and update test's updated_at timestamp
    await updateSessionState(telegramId, 'idle', {
      currentTestId: null,
      questionCount: 0,
      tempQuestion: undefined,
      tempAnswers: undefined,
    });

    const successMessage = `‚úÖ *–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!*

–¢–≤–æ–π —Ç–µ—Å—Ç ÔøΩÔøΩ–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏ —É–∑–Ω–∞—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–∏ —Ç–µ–±—è –∑–Ω–∞—é—Ç! üéâ

–°–æ–∑–¥–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω —Ç–µ—Å—Ç? üëá`;

    return ctx.reply(successMessage, {
      parse_mode: 'Markdown',
      ...mainMenuKeyboard,
    });
  } catch (error) {
    console.error('Error in handleSaveTest:', error);
  }
}

export async function handleStopCreation(ctx: Context) {
  try {
    const telegramId = ctx.from?.id;
    if (!telegramId) return;

    await updateSessionState(telegramId, 'idle', {
      currentTestId: null,
      questionCount: 0,
    });

    return ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', {
      ...mainMenuKeyboard,
    });
  } catch (error) {
    console.error('Error in handleStopCreation:', error);
  }
}

export async function handleMyTests(ctx: Context) {
  try {
    const telegramId = ctx.from?.id;
    if (!telegramId) return;

    const user = await getUserByTelegramId(telegramId);
    if (!user) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');

    const tests = await getTestsByUser(user.id);

    if (tests.length === 0) {
      return ctx.reply('üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç!', {
        ...mainMenuKeyboard,
      });
    }

    for (const test of tests) {
      const testInfo = `üìù *${test.title}*\nüî¢ –í–æ–ø—Ä–æ—Å–æ–≤: ${test.question_count}`;
      await ctx.reply(testInfo, {
        parse_mode: 'Markdown',
        ...testActionKeyboard(test.id),
      });
    }

    return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞:', {
      ...mainMenuKeyboard,
    });
  } catch (error) {
    console.error('Error in handleMyTests:', error);
    return ctx.reply('–ü—Ä–æ–∏ÔøΩÔøΩ–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Å—Ç–æ–≤.');
  }
}

export async function handleShareTest(ctx: any) {
  try {
    const matches = ctx.match || [];
    const testId = parseInt(matches[1] || '0');
    if (!testId) return ctx.reply('–û—à–∏–±–∫–∞: —Ç–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');

    const shareLink = `t.me/friendlyquizbot?start=test_${testId}`;
    const message = `üîó *–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç:*\n\n\`${shareLink}\`\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º, –∏ –æ–Ω–∏ —Å–º–æ–≥—É—Ç –ø—Ä–æ–π—Ç–∏ –≤–∞—à —Ç–µ—Å—Ç!`;

    return ctx.reply(message, {
      parse_mode: 'Markdown',
      ...mainMenuKeyboard,
    });
  } catch (error) {
    console.error('Error in handleShareTest:', error);
    return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏.');
  }
}

export async function handleDeleteTest(ctx: any) {
  try {
    const matches = ctx.match || [];
    const testId = parseInt(matches[1] || '0');
    if (!testId) return ctx.reply('–û—à–∏–±–∫–∞: —Ç–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');

    await deleteTest(testId);

    return ctx.reply('üóëÔ∏è –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω.', {
      ...mainMenuKeyboard,
    });
  } catch (error) {
    console.error('Error in handleDeleteTest:', error);
    return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞.');
  }
}

export async function handleToggleCorrectAnswer(ctx: any) {
  try {
    const telegramId = ctx.from?.id;
    if (!telegramId) return;

    const matches = ctx.match || [];
    const answerId = matches[1];
    const session = await getSession(telegramId);

    if (!session) return ctx.reply('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

    // Track selected correct answers
    let correctAnswers = session.temp_answers ? JSON.parse(session.temp_answers) : [];

    if (correctAnswers.includes(answerId)) {
      correctAnswers = correctAnswers.filter((id: string) => id !== answerId);
    } else {
      correctAnswers.push(answerId);
    }

    await updateSessionState(telegramId, 'collecting_answers', {
      tempAnswers: JSON.stringify(correctAnswers),
    });

    const isSelected = correctAnswers.includes(answerId);
    const mark = isSelected ? '‚úÖ' : '‚òê';

    return ctx.answerCbQuery(`${mark} ${isSelected ? '–û—Ç–º–µ—á–µ–Ω–æ' : '–û—Ç–º–µ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞'}`);
  } catch (error) {
    console.error('Error in handleToggleCorrectAnswer:', error);
  }
}

export async function handleConfirmCorrectAnswers(ctx: Context) {
  try {
    const telegramId = ctx.from?.id;
    if (!telegramId) return;

    const session = await getSession(telegramId);
    if (!session) return;

    const correctAnswerIds = JSON.parse(session.temp_answers || '[]');
    const tempQuestion = JSON.parse(session.temp_question || '{}');

    // Mark answers as correct in database
    for (const answerId of correctAnswerIds) {
      const [questionId, answerIdx] = answerId.split('_');
      if (parseInt(questionId) === tempQuestion.id) {
        // Get all answers for this question and mark the correct ones
        const questionData = await getQuestionWithAnswers(tempQuestion.id);
        const answer = questionData.answers[parseInt(answerIdx)];
        if (answer) {
          await markAnswerAsCorrect(answer.id);
        }
      }
    }

    const questionCount = session.current_question_count || 0;

    if (questionCount >= 5) {
      // Show save button
      return ctx.reply('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç–º–µ—á–µ–Ω—ã!', {
        ...saveTestKeyboard,
      });
    } else {
      // Show next question button
      return ctx.reply('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç–º–µ—á–µ–Ω—ã!', {
        ...nextQuestionKeyboard,
      });
    }
  } catch (error) {
    console.error('Error in handleConfirmCorrectAnswers:', error);
  }
}
