import { UserSession } from '../types';

export function formatStartMessage(): string {
  return `üòä –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü—Ä–æ–≤–µ—Ä–∫—É –î—Ä—É–∂–±—ã! üéâ

–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ —Ç–≤–æ–∏ –¥—Ä—É–∑—å—è —Ç–µ–±—è –∑–Ω–∞—é—Ç. –ü–æ–¥–µ–ª–∏—Å—å —Ç–µ—Å—Ç–æ–º —Å–æ —Å–≤–æ–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –î–û–°–¢–ò–ñ–ï–ù–ò–Ø –î–†–£–ñ–ë–´! üèÜ

–°–æ–∑–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –æ —Å–µ–±–µ, –¥–∞–≤–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤, –∏ –ø—É—Å—Ç—å —Ç–≤–æ–∏ –¥—Ä—É–∑—å—è –ø—Ä–æ–≤–µ—Ä—è—Ç —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ —Ç–µ–±–µ. –≠—Ç–æ –≤–µ—Å–µ–ª–æ, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∏ —É–∫—Ä–µ–ø–ª—è–µ—Ç –¥—Ä—É–∂–±—É! üí™`;
}

export function formatCreateTestInstructions(): string {
  return `üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Ç–µ—Å—Ç–∞:

1Ô∏è‚É£ –ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –æ —Å–µ–±–µ
2Ô∏è‚É£ –î–æ–±–∞–≤—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (–º–∏–Ω–∏–º—É–º 2)
3Ô∏è‚É£ –ü—Ä–æ–¥–æ–ª–∂–∞–π –¥–æ–±–∞–≤–ª—è—Ç—å –≤–æ–ø—Ä–æ—Å—ã
4Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–∏ —Ç–µ—Å—Ç, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç 5+ –≤–æ–ø—Ä–æ—Å–æ–≤

–¢—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º–∞—Ç:
–û—Ç–≤–µ—Ç: –ü–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç
–û—Ç–≤–µ—Ç: –í—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç
–û—Ç–≤–µ—Ç: –¢—Ä–µ—Ç–∏–π –æ—Ç–≤–µ—Ç

–ü–æ–µ—Ö–∞–ª–∏! üöÄ`;
}

export function formatQuestionPrompt(questionIndex: number): string {
  return `üìå –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å #${questionIndex + 1}:`;
}

export function formatQuestionStatus(questionIndex: number, questionText: string, options: string[]): string {
  const optionsList = options.map((opt, idx) => `${idx + 1} - ${opt}`).join('\n');
  return `üìã –í–æ–ø—Ä–æ—Å ${questionIndex + 1}: ${questionText}

–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:
${optionsList}

‚ûï –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –∏ÔøΩÔøΩ–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É`;
}

export function formatTestSummary(questions: any[]): string {
  let summary = `‚úÖ –í–∞—à —Ç–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç ${questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤:\n\n`;
  questions.forEach((q, idx) => {
    summary += `${idx + 1}. ${q.text}\n`;
    q.options.forEach((opt: string, optIdx: number) => {
      summary += `   ${String.fromCharCode(97 + optIdx)}) ${opt}\n`;
    });
    summary += '\n';
  });
  return summary;
}

export function formatWaitingForAnswers(): string {
  return `üìç –í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n(–º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞)`;
}

export function formatMinAnswersError(): string {
  return `‚ùå –û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –µ—â—ë!`;
}

export function formatTestSaved(testId: number): string {
  return `‚ú® –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω! ‚ú®

ID –≤–∞—à–µ–≥–æ —Ç–µ—Å—Ç–∞: ${testId}

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏!

üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –¥—Ä—É–∑–µ–π: https://t.me/${process.env.TELEGRAM_BOT_USERNAME}?start=quiz_${testId}`;
}
