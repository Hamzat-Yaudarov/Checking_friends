import { Telegraf } from 'telegraf';
import {
  ensureUserExists,
  getOrCreateSession,
  updateSessionData,
  createTest,
  addQuestion,
  addAnswer,
  getQuestionById,
  getAnswersByQuestionId,
  getUserTests,
  getTestWithQuestions
} from './database-service.js';

const TOKEN = '8357920603:AAEcRZlAzCebZxQCIRLPQWRASZL-3upZOC8';
const bot = new Telegraf(TOKEN);

const WELCOME_KEYBOARD = {
  reply_markup: {
    inline_keyboard: [
      [{ text: '‚ú® –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç ‚ú®', callback_data: 'create_test' }],
      [{ text: 'üìã –ú–æ–∏ —Ç–µ—Å—Ç—ã', callback_data: 'my_tests' }]
    ]
  }
};

const STOP_BUTTON = {
  reply_markup: {
    inline_keyboard: [
      [{ text: 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞', callback_data: 'stop_creation' }]
    ]
  }
};

bot.start(async (ctx) => {
  try {
    const user = ctx.from;
    await ensureUserExists(user.id, user.username, user.first_name);
    
    const message = `‚ú® –ü—Ä–∏–≤–µ—Ç, ${user.first_name}! ‚ú®\n\n` +
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–∂–±—ã"! üëã\n\n` +
      `–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, ` +
      `–Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ —Ç–≤–æ–∏ –¥—Ä—É–∑—å—è —Ç–µ–±—è –∑–Ω–∞—é—Ç! üéØ\n\n` +
      `–°–æ–∑–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –¥–æ–±–∞–≤–ª—è–π –æ—Ç–≤–µ—Ç—ã –∏ –ø–æ–ª—É—á–∞–π –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–µ ` +
      `–î–û–°–¢–ò–ñ–ï–ù–ò–Ø –î–†–£–ñ–ë–´! üèÜ\n\n` +
      `–ù–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! ‚§µÔ∏è`;
    
    await ctx.reply(message, WELCOME_KEYBOARD);
  } catch (error) {
    console.error('Start command error:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.');
  }
});

bot.action('create_test', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const testId = await createTest(userId);
    
    const session = {
      state: 'creating_test',
      testId: testId,
      questions: [],
      currentQuestionIndex: -1,
      currentQuestion: null,
      currentAnswers: [],
      lastMessageId: null,
      lastQuestionMessageId: null
    };
    
    await updateSessionData(userId, session);
    await ctx.answerCbQuery();
    
    try {
      await ctx.editMessageText(
        `üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞\n\n` +
        `–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n` +
        `1Ô∏è‚É£ –í–≤–µ–¥–∏ –≤–æ–ø—Ä–æ—Å\n` +
        `2Ô∏è‚É£ –î–æ–±–∞–≤—å –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤\n` +
        `3Ô∏è‚É£ –ù–∞–∂–º–∏ "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞\n` +
        `4Ô∏è‚É£ –ü–æ—Å–ª–µ 5+ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ—Å—Ç"\n\n` +
        `–ü—Ä–∏—Å—Ç—É–ø–∏–º! –í–≤–µ–¥–∏ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:`,
        { reply_markup: { inline_keyboard: [[{ text: 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data: 'stop_creation' }]] } }
      );
    } catch (err) {
      await ctx.reply(
        `üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞\n\n` +
        `–í–≤–µ–¥–∏ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:`,
        STOP_BUTTON
      );
    }
  } catch (error) {
    console.error('Create test error:', error);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–∞');
  }
});

bot.action('my_tests', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const tests = await getUserTests(userId);
    
    await ctx.answerCbQuery();
    
    if (tests.length === 0) {
      return ctx.reply('–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ—Å—ÇÔøΩÔøΩ–≤. –°–æ–∑–¥–∞–π —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç! üéØ');
    }
    
    let message = 'üìã –¢–≤–æ–∏ —Ç–µ—Å—Ç—ã:\n\n';
    const keyboard = [];
    
    tests.forEach((test, index) => {
      const date = new Date(test.created_at).toLocaleDateString('ru-RU');
      message += `${index + 1}. "${test.title}"\n   ${test.question_count} –≤–æ–ø—Ä–æ—Å–æ–≤ | ${date}\n\n`;
      
      keyboard.push([
        { text: `–ü—Ä–æ—Å–º–æ—Ç—Ä #${index + 1}`, callback_data: `view_test_${test.id}` },
        { text: 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è', callback_data: `share_test_${test.id}` }
      ]);
    });
    
    keyboard.push([{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }]);
    
    try {
      await ctx.editMessageText(message, {
        reply_markup: { inline_keyboard: keyboard }
      });
    } catch (err) {
      await ctx.reply(message, {
        reply_markup: { inline_keyboard: keyboard }
      });
    }
  } catch (error) {
    console.error('My tests error:', error);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Å—Ç–æ–≤');
  }
});

bot.action('back_to_menu', async (ctx) => {
  try {
    await ctx.answerCbQuery();
    const message = `‚ú® –ü—Ä–∏–≤–µ—Ç! ‚ú®\n\n` +
      `–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?`;
    
    try {
      await ctx.editMessageText(message, WELCOME_KEYBOARD);
    } catch (err) {
      await ctx.reply(message, WELCOME_KEYBOARD);
    }
  } catch (error) {
    console.error('Back to menu error:', error);
  }
});

bot.action('stop_creation', async (ctx) => {
  try {
    const userId = ctx.from.id;
    await updateSessionData(userId, { state: 'idle' });
    await ctx.answerCbQuery();
    
    try {
      await ctx.editMessageText(
        `–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π! üéØ`,
        WELCOME_KEYBOARD
      );
    } catch (err) {
      await ctx.reply(`–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.`, WELCOME_KEYBOARD);
    }
  } catch (error) {
    console.error('Stop creation error:', error);
  }
});

bot.on('text', async (ctx) => {
  try {
    const userId = ctx.from.id;
    
    const sessionResult = await getOrCreateSession(userId);
    const session = sessionResult.session_data || { state: 'idle' };
    
    if (session.state !== 'creating_test') {
      return;
    }
    
    const userMessage = ctx.message.text;
    
    if (!session.currentQuestion) {
      session.currentQuestion = userMessage;
      session.currentAnswers = [];
      
      await updateSessionData(userId, session);
      
      try {
        await ctx.deleteMessage();
      } catch (err) {
        console.log('Could not delete message');
      }
      
      const questionNum = (session.questions?.length || 0) + 1;
      const messageText = `‚ùì –í–æ–ø—Ä–æ—Å ${questionNum}: ${userMessage}\n\n` +
        `–î–æ–±–∞–≤—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤.\n` +
        `–§–æ—Ä–º–∞—Ç: –û—Ç–≤–µ—Ç: (—Ç–µ–∫—Å—Ç) –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ä–∞–∑—É:\n` +
        `–û—Ç–≤–µ—Ç: –í–∞—Ä–∏–∞–Ω—Ç 1\n` +
        `–û—Ç–≤–µ—Ç: –í–∞—Ä–∏–∞–Ω—Ç 2\n` +
        `–û—Ç–≤–µ—Ç: –í–∞—Ä–∏–∞–Ω—Ç 3`;
      
      const replyMsg = await ctx.reply(messageText, STOP_BUTTON);
      session.lastQuestionMessageId = replyMsg.message_id;
      await updateSessionData(userId, session);
      
    } else {
      const answerLines = userMessage.split('\n')
        .map(line => line.replace(/^–û—Ç–≤–µ—Ç:\s*/i, '').trim())
        .filter(line => line.length > 0);
      
      session.currentAnswers.push(...answerLines);
      
      let messageText = `‚ùì –í–æ–ø—Ä–æ—Å ${(session.questions?.length || 0) + 1}: ${session.currentQuestion}\n\n` +
        `–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n`;
      
      session.currentAnswers.forEach((answer, index) => {
        messageText += `${index + 1}. ${answer}\n`;
      });
      
      const keyboard = [];
      if (session.currentAnswers.length >= 2) {
        keyboard.push([{ text: '‚ûï –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å', callback_data: 'next_question' }]);
      }
      keyboard.push([{ text: 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data: 'stop_creation' }]);
      
      await updateSessionData(userId, session);
      
      try {
        await ctx.deleteMessage();
      } catch (err) {
        console.log('Could not delete message');
      }
      
      if (session.lastQuestionMessageId) {
        try {
          await ctx.telegram.editMessageText(
            ctx.chat.id,
            session.lastQuestionMessageId,
            null,
            messageText,
            { reply_markup: { inline_keyboard: keyboard } }
          );
        } catch (err) {
          const msg = await ctx.reply(messageText, {
            reply_markup: { inline_keyboard: keyboard }
          });
          session.lastQuestionMessageId = msg.message_id;
          await updateSessionData(userId, session);
        }
      } else {
        const msg = await ctx.reply(messageText, {
          reply_markup: { inline_keyboard: keyboard }
        });
        session.lastQuestionMessageId = msg.message_id;
        await updateSessionData(userId, session);
      }
    }
  } catch (error) {
    console.error('Text handler error:', error);
  }
});

bot.action('next_question', async (ctx) => {
  try {
    const userId = ctx.from.id;
    
    const sessionResult = await getOrCreateSession(userId);
    let session = sessionResult.session_data || { state: 'idle' };
    
    if (session.state !== 'creating_test') return ctx.answerCbQuery();
    
    const questionText = session.currentQuestion;
    const answers = session.currentAnswers || [];
    
    if (!questionText || answers.length < 2) {
      return ctx.answerCbQuery('–î–æ–±–∞–≤—å –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤!');
    }
    
    const questionId = await addQuestion(session.testId, questionText, (session.questions?.length || 0) + 1);
    
    for (let i = 0; i < answers.length; i++) {
      await addAnswer(questionId, answers[i], i + 1);
    }
    
    if (!session.questions) session.questions = [];
    session.questions.push({
      id: questionId,
      text: questionText,
      answers: answers
    });
    
    session.currentQuestion = null;
    session.currentAnswers = [];
    
    const questionNum = session.questions.length + 1;
    
    const keyboard = [];
    if (session.questions.length >= 5) {
      keyboard.push([{ text: '‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ—Å—Ç', callback_data: 'save_test' }]);
    }
    keyboard.push([{ text: 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data: 'stop_creation' }]);
    
    const messageText = `‚úÖ –í–æ–ø—Ä–æ—Å ${session.questions.length} —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n\n` +
      `–í–≤–µ–¥–∏ –≤–æ–ø—Ä–æ—Å #${questionNum}:`;
    
    await updateSessionData(userId, session);
    
    try {
      await ctx.editMessageText(messageText, {
        reply_markup: { inline_keyboard: keyboard }
      });
    } catch (err) {
      await ctx.reply(messageText, {
        reply_markup: { inline_keyboard: keyboard }
      });
    }
    
    await ctx.answerCbQuery('‚úÖ –í–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!');
  } catch (error) {
    console.error('Next question error:', error);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞');
  }
});

bot.action('save_test', async (ctx) => {
  try {
    const userId = ctx.from.id;
    
    const sessionResult = await getOrCreateSession(userId);
    const session = sessionResult.session_data || { state: 'idle' };
    
    if (session.state !== 'creating_test' || !session.questions || session.questions.length < 5) {
      return ctx.answerCbQuery('–î–æ–±–∞–≤—å –º–∏–Ω–∏–º—É–º 5 –≤–æ–ø—Ä–æ—Å–æ–≤!');
    }
    
    if (session.currentQuestion && session.currentAnswers.length >= 2) {
      const questionId = await addQuestion(session.testId, session.currentQuestion, session.questions.length + 1);
      for (let i = 0; i < session.currentAnswers.length; i++) {
        await addAnswer(questionId, session.currentAnswers[i], i + 1);
      }
      session.questions.push({
        id: questionId,
        text: session.currentQuestion,
        answers: session.currentAnswers
      });
    }
    
    await updateSessionData(userId, { state: 'idle' });
    
    const message = `üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n\n` +
      `üìä –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${session.questions.length}\n\n` +
      `–ü–æ–¥–µ–ª–∏—Å—å —Ç–µ—Å—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏! üëá`;
    
    try {
      await ctx.editMessageText(message, WELCOME_KEYBOARD);
    } catch (err) {
      await ctx.reply(message, WELCOME_KEYBOARD);
    }
    
    await ctx.answerCbQuery('‚úÖ –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!');
  } catch (error) {
    console.error('Save test error:', error);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞');
  }
});

bot.action(/^view_test_(\d+)$/, async (ctx) => {
  try {
    const testId = parseInt(ctx.match[1]);
    const test = await getTestWithQuestions(testId);
    
    if (!test) {
      return ctx.answerCbQuery('–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    let message = `üìã "${test.title}"\n\n`;
    message += `üìä –í–æ–ø—Ä–æ—Å–æ–≤: ${test.questions.length}\n\n`;
    
    test.questions.forEach((q, idx) => {
      message += `${idx + 1}. ${q.question_text}\n`;
      q.answers.forEach((a, aidx) => {
        message += `   ${aidx + 1}) ${a.answer_text}\n`;
      });
      message += '\n';
    });
    
    const keyboard = [
      [{ text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', callback_data: `delete_test_${testId}` }],
      [{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'my_tests' }]
    ];
    
    await ctx.answerCbQuery();
    try {
      await ctx.editMessageText(message, {
        reply_markup: { inline_keyboard: keyboard }
      });
    } catch (err) {
      await ctx.reply(message, {
        reply_markup: { inline_keyboard: keyboard }
      });
    }
  } catch (error) {
    console.error('View test error:', error);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Å—Ç–∞');
  }
});

bot.action(/^share_test_(\d+)$/, async (ctx) => {
  try {
    const testId = ctx.match[1];
    const shareLink = `https://t.me/friendlyquizbot?start=test_${testId}`;
    
    const message = `üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç:\n${shareLink}\n\n` +
      `–û—Ç–ø—Ä–∞–≤—å —ç—Ç—É —Å—Å—ã–ª–∫—É —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º! üëá`;
    
    await ctx.answerCbQuery();
    try {
      await ctx.editMessageText(message, {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'my_tests' }]
          ]
        }
      });
    } catch (err) {
      await ctx.reply(message, {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'my_tests' }]
          ]
        }
      });
    }
  } catch (error) {
    console.error('Share test error:', error);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏');
  }
});

bot.action(/^delete_test_(\d+)$/, async (ctx) => {
  try {
    const testId = parseInt(ctx.match[1]);
    
    const message = `‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`;
    
    const keyboard = [
      [
        { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `view_test_${testId}` },
        { text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data: `confirm_delete_${testId}` }
      ]
    ];
    
    await ctx.answerCbQuery();
    try {
      await ctx.editMessageText(message, {
        reply_markup: { inline_keyboard: keyboard }
      });
    } catch (err) {
      await ctx.reply(message, {
        reply_markup: { inline_keyboard: keyboard }
      });
    }
  } catch (error) {
    console.error('Delete test confirmation error:', error);
  }
});

bot.action(/^confirm_delete_(\d+)$/, async (ctx) => {
  try {
    const testId = parseInt(ctx.match[1]);
    
    console.log('Deleting test:', testId);
    
    await ctx.answerCbQuery('‚úÖ –¢–µ—Å—Ç —É–¥–∞–ª—ë–Ω');
    
    try {
      await ctx.editMessageText(
        `‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚Üê –ö —Ç–µ—Å—Ç–∞–º', callback_data: 'my_tests' }]
            ]
          }
        }
      );
    } catch (err) {
      await ctx.reply(`‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚Üê –ö —Ç–µ—Å—Ç–∞–º', callback_data: 'my_tests' }]
          ]
        }
      });
    }
  } catch (error) {
    console.error('Confirm delete error:', error);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞');
  }
});

export default bot;
